import streamlit as st

st.title("üß† Comment Classification")

# --- Sub-topic Navigation ---
option = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢", ["üîç Preview Comments", "üß™ ML Modeling", "üìà Result Visualization"])

# --- Section 1 ---
if option == "üîç Preview Comments":
    st.subheader("üîç ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå")
    # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å MongoDB ‡∏´‡∏£‡∏∑‡∏≠ CSV ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏ä‡∏ß‡πå
    st.write("‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå top 5 ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î")
mongo_uri = "mongodb+srv://readwrite:OSbtDM3XE8nP2JqT@voranitha.z6voe4w.mongodb.net/"
 
@st.cache_resource
def get_database():
    """
    ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB Atlas ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô object ‡∏Ç‡∏≠‡∏á database
    ‡πÉ‡∏ä‡πâ st.cache_resource ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    """
    try:
        client = MongoClient(mongo_uri)
        client.admin.command('ping') # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        return client.car # ‡∏Ñ‡∏∑‡∏ô database 'car'
    except ConnectionFailure as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB ‡πÑ‡∏î‡πâ: {e}")
        st.stop() # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Streamlit ‡∏´‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    except OperationFailure as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô MongoDB: {e}")
        st.stop()
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
        st.stop()
 
# --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Streamlit App ---
 
# ‡∏î‡∏∂‡∏á database object
db = get_database()
collection = db.comment
data = list(collection.find())  # Get all documents as a list of dicts
data = pd.DataFrame(data)         # Convert to DataFrame
 
# Query only video_title
comments = list(collection.find({}, {"video_title": 1}))
df = pd.DataFrame(comments)
 
# Check column
if 'video_title' not in df.columns:
    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'video_title'")
else:
    # Count frequency of each title
    video_counts = df['video_title'].value_counts().reset_index()
    video_counts.columns = ['video_title', 'count']
 
    # Create dynamic label based on keywords
    def generate_label(title):
        title_upper = title.upper()  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å‡πÉ‡∏´‡∏ç‡πà
        if "ATTO" in title_upper:
            return "BYD Atto3"
        elif "SEAL" in title_upper:
            return "BYD Seal"
        elif "DOLPHIN" in title_upper:
            return "BYD Dolphin"
        else:
            return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"  # ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞ return title ‡πÄ‡∏≠‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ
 
    # Apply label
    video_counts["label"] = video_counts["video_title"].apply(generate_label)
 
    # Reorder columns
    result_df = video_counts[["label", "video_title", "count"]]
 
    # Display
    st.subheader("üìä Video Comment Counts")
    st.dataframe(result_df)
 










# --- Section 2 ---
elif option == "üß™ ML Modeling":
    st.subheader("üß™ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning")
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å model (Naive Bayes, SVM, etc.)
    model_type = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•", ["Naive Bayes", "SVM", "Random Forest"])
    st.write(f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•: {model_type}")

# --- Section 3 ---
elif option == "üìà Result Visualization":
    st.subheader("üìà ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå")
    # ‡πÅ‡∏™‡∏î‡∏á confusion matrix ‡∏´‡∏£‡∏∑‡∏≠ accuracy score
    st.write("‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü performance ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")

